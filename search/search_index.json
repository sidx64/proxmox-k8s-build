{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About the initiative \u00b6 The idea \u00b6 With the single intent of learning the working and internals of Kubernetes, I began dreaming of the idea of a HomeLab. This homelab would be a central location where I could run my various projects, and do a bit of prototyping as well as learning. To be able to run full-fledged Kubernetes Clusters, we would need a playground area where we could make and break the systems multiple times during the course of learning how it all works. So that's where our journey begins. This document intends to be a journal of sorts, a document of my learnings\u0335 if you will. Following the document step-by-step should also yield a fully functional kubernetes cluster on your home system. The hardware \u00b6 While Kubernetes clusters can be built on top of considerably cheap and low-powered hardware, based on my needs and the future plans I had for my HomeLab, I decided to go with a beefed-up desktop workstation. I could also have gone with a used/refurbished DL360 Gen 8 server with Intel Xeon based processors, or gone the tiny PC route with the Intel NUC platform, but prospective noise and power bills put me off the server path. NUCs on the other hand, seem to be pretty highly priced at the moment, and are hard to procure too. Hence, I zeroed-in on the following configuration: Component Configuration/Capacity Comments Processor AMD Ryzen 9 5950x With 16 cores and 32 threads in total, this is the best-in-class processor today, second only to the AMD threadripper series. RAM G.Skill RipJaws 2x32G DDR4 3600MHz It is recommended to go with a 3600MHz RAM cards in order to make the best use of the Ryzen 5000 series processors. Mainboard Asus TUF x570 Mainboard We needed a mainboard that supports the AM4 processor platform, and has enough slots to support at least two SSD nVME cards. Storage Western Digital SN850 Black 1TB+2TB SSD nVME With 7000MBps Read and 4100MBps Write speeds, this is an excellent candidate for what we intend to do. Graphics Asus NVidia GT730 2GB We dont really need a heavy Graphics solution for this, so we went with a simple 2GB NVidia GT730 based graphics solution. Networking Intel i350 T2 Gigabit Ethernet Card The Asus x570 Mainboard comes with a Realtek based network card, and since I needed dual ports, the Intel i350 seemed to be the best choice. The setup \u00b6 With the compute config laid out above, I went ahead with the following configuration for our setup: The image above represents the setup I decided to go with: We dual-boot the host machine with Windows 11 and Debian 11 Linux (the Windows11 system is just there for windows-related personal work I may come accross). The Debian system runs Proxmox - a type 1 Hypervisor. Proxmox allows us to build our virtual machines, containers, and more in a datacenter-like fashion. Within Proxmox, we then build virtual nodes that will act as Kubernetes cluster members that will run our containerised workloads. The goal \u00b6 Setup a quick infrastructure automation framework that can quickly let us build the Kubernetes Cluster nodes, and have Kubernetes setup in a fully automated fashion using Terraform. Use the Kubernetes Cluster to run some containerised workloads. Use the kubernetes cluster to prepare and ready myself for the upcoming CKAD certification.","title":"Home"},{"location":"#about-the-initiative","text":"","title":"About the initiative"},{"location":"#the-idea","text":"With the single intent of learning the working and internals of Kubernetes, I began dreaming of the idea of a HomeLab. This homelab would be a central location where I could run my various projects, and do a bit of prototyping as well as learning. To be able to run full-fledged Kubernetes Clusters, we would need a playground area where we could make and break the systems multiple times during the course of learning how it all works. So that's where our journey begins. This document intends to be a journal of sorts, a document of my learnings\u0335 if you will. Following the document step-by-step should also yield a fully functional kubernetes cluster on your home system.","title":"The idea"},{"location":"#the-hardware","text":"While Kubernetes clusters can be built on top of considerably cheap and low-powered hardware, based on my needs and the future plans I had for my HomeLab, I decided to go with a beefed-up desktop workstation. I could also have gone with a used/refurbished DL360 Gen 8 server with Intel Xeon based processors, or gone the tiny PC route with the Intel NUC platform, but prospective noise and power bills put me off the server path. NUCs on the other hand, seem to be pretty highly priced at the moment, and are hard to procure too. Hence, I zeroed-in on the following configuration: Component Configuration/Capacity Comments Processor AMD Ryzen 9 5950x With 16 cores and 32 threads in total, this is the best-in-class processor today, second only to the AMD threadripper series. RAM G.Skill RipJaws 2x32G DDR4 3600MHz It is recommended to go with a 3600MHz RAM cards in order to make the best use of the Ryzen 5000 series processors. Mainboard Asus TUF x570 Mainboard We needed a mainboard that supports the AM4 processor platform, and has enough slots to support at least two SSD nVME cards. Storage Western Digital SN850 Black 1TB+2TB SSD nVME With 7000MBps Read and 4100MBps Write speeds, this is an excellent candidate for what we intend to do. Graphics Asus NVidia GT730 2GB We dont really need a heavy Graphics solution for this, so we went with a simple 2GB NVidia GT730 based graphics solution. Networking Intel i350 T2 Gigabit Ethernet Card The Asus x570 Mainboard comes with a Realtek based network card, and since I needed dual ports, the Intel i350 seemed to be the best choice.","title":"The hardware"},{"location":"#the-setup","text":"With the compute config laid out above, I went ahead with the following configuration for our setup: The image above represents the setup I decided to go with: We dual-boot the host machine with Windows 11 and Debian 11 Linux (the Windows11 system is just there for windows-related personal work I may come accross). The Debian system runs Proxmox - a type 1 Hypervisor. Proxmox allows us to build our virtual machines, containers, and more in a datacenter-like fashion. Within Proxmox, we then build virtual nodes that will act as Kubernetes cluster members that will run our containerised workloads.","title":"The setup"},{"location":"#the-goal","text":"Setup a quick infrastructure automation framework that can quickly let us build the Kubernetes Cluster nodes, and have Kubernetes setup in a fully automated fashion using Terraform. Use the Kubernetes Cluster to run some containerised workloads. Use the kubernetes cluster to prepare and ready myself for the upcoming CKAD certification.","title":"The goal"},{"location":"01-proxmox/installation/_index.en/","text":"Proxmox Installation \u00b6 Assumptions: \u00b6 Your hardware setup is complete and ready to go You already have a Debian 11 system installed and ready on your host machine (we'll call this host machine as the HomeLab from here on out). If not, read this . You have debian connected to the internet Installing Proxmox \u00b6 Note: This documentation is a mirror of this official Proxmox wiki. Set up your /etc/hosts file 127 .0.0.1 localhost 192 .168.1.17 homelab homelab.home pveproxy # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters Test your /etc/hosts file hostname --ip-address 192 .168.1.17 # Should return the IP address assigned to the node. Add the Proxmox repository into apt echo \"deb [arch=amd64] http://download.proxmox.com/debian/pve bullseye pve-no-subscription\" > /etc/apt/sources.list.d/pve-install-repo.list Add the GPG keys and verify wget https://enterprise.proxmox.com/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg # verify sha512sum /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg 7fb03ec8a1675723d2853b84aa4fdb49a46a3bb72b9951361488bfd19b29aab0a789a4f8c7406e71a69aabbc727c936d3549731c4659ffa1a08f44db8fdcebfa /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg Install Proxmox VE apt install proxmox-ve postfix open-iscsi Note: If you have a mail server in your network, you should configure postfix as a satellite system. Your existing mail server will then be the relay host which will route the emails sent by Proxmox VE to their final recipient. If you don't know what to enter here, choose local only and leave the system name as is. Reboot your System into Proxmox systemctl reboot Remove the Debian Kernel Proxmox VE ships its own kernel and keeping the Debian default kernel can lead to trouble on upgrades, for example, with Debian point releases. Therefore, you must remove the default Debian kernel, and then update grub bootloader: apt remove linux-image-amd64 'linux-image-5.10\\*' update-grub Removing the OS-Prober Package [OPTIONAL] In my homelab setup, I have setup a dual-boot system with Windows 11 and Debian/Proxmox. If you have no such dual-boot config on your homelab setup, feel free to remove the os-prober package. Removing this package will avoid unexpected (VM) images from being scanned and added as boot entries into your grub loader: apt remove os-prober Log-on to Proxmox Web Interface as root Proxmox enables a web interface on port 8006 on the homelab's assigned IP: https://192.168.1.17:8006 . You can login to the proxmox system using root (PAM authentication) Create an Admin group and a user account Create an Admin group using the \"Group\" section and name it \"Admin\". Next, create a user account. The user account must already exist on the system (you may already have created this user account during Debian 11 installation). This can be done using the Users section of the Datacenter tab: Add the new user to the \"Admin\" group. Add Administrator permissions to the Admin group Click on \"Permissions\" tab and add a new group permission for path \"/\". Add the Admin group and the \"administrator\" role: Logout and login as the non-root user. We are now ready to start using Proxmox.","title":"Installation"},{"location":"01-proxmox/installation/_index.en/#proxmox-installation","text":"","title":"Proxmox Installation"},{"location":"01-proxmox/installation/_index.en/#assumptions","text":"Your hardware setup is complete and ready to go You already have a Debian 11 system installed and ready on your host machine (we'll call this host machine as the HomeLab from here on out). If not, read this . You have debian connected to the internet","title":"Assumptions:"},{"location":"01-proxmox/installation/_index.en/#installing-proxmox","text":"Note: This documentation is a mirror of this official Proxmox wiki. Set up your /etc/hosts file 127 .0.0.1 localhost 192 .168.1.17 homelab homelab.home pveproxy # The following lines are desirable for IPv6 capable hosts ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters Test your /etc/hosts file hostname --ip-address 192 .168.1.17 # Should return the IP address assigned to the node. Add the Proxmox repository into apt echo \"deb [arch=amd64] http://download.proxmox.com/debian/pve bullseye pve-no-subscription\" > /etc/apt/sources.list.d/pve-install-repo.list Add the GPG keys and verify wget https://enterprise.proxmox.com/debian/proxmox-release-bullseye.gpg -O /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg # verify sha512sum /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg 7fb03ec8a1675723d2853b84aa4fdb49a46a3bb72b9951361488bfd19b29aab0a789a4f8c7406e71a69aabbc727c936d3549731c4659ffa1a08f44db8fdcebfa /etc/apt/trusted.gpg.d/proxmox-release-bullseye.gpg Install Proxmox VE apt install proxmox-ve postfix open-iscsi Note: If you have a mail server in your network, you should configure postfix as a satellite system. Your existing mail server will then be the relay host which will route the emails sent by Proxmox VE to their final recipient. If you don't know what to enter here, choose local only and leave the system name as is. Reboot your System into Proxmox systemctl reboot Remove the Debian Kernel Proxmox VE ships its own kernel and keeping the Debian default kernel can lead to trouble on upgrades, for example, with Debian point releases. Therefore, you must remove the default Debian kernel, and then update grub bootloader: apt remove linux-image-amd64 'linux-image-5.10\\*' update-grub Removing the OS-Prober Package [OPTIONAL] In my homelab setup, I have setup a dual-boot system with Windows 11 and Debian/Proxmox. If you have no such dual-boot config on your homelab setup, feel free to remove the os-prober package. Removing this package will avoid unexpected (VM) images from being scanned and added as boot entries into your grub loader: apt remove os-prober Log-on to Proxmox Web Interface as root Proxmox enables a web interface on port 8006 on the homelab's assigned IP: https://192.168.1.17:8006 . You can login to the proxmox system using root (PAM authentication) Create an Admin group and a user account Create an Admin group using the \"Group\" section and name it \"Admin\". Next, create a user account. The user account must already exist on the system (you may already have created this user account during Debian 11 installation). This can be done using the Users section of the Datacenter tab: Add the new user to the \"Admin\" group. Add Administrator permissions to the Admin group Click on \"Permissions\" tab and add a new group permission for path \"/\". Add the Admin group and the \"administrator\" role: Logout and login as the non-root user. We are now ready to start using Proxmox.","title":"Installing Proxmox"},{"location":"01-proxmox/network/_index.en/","text":"Networking","title":"Network setup"},{"location":"01-proxmox/os-images/_index.en/","text":"OS Images","title":"OS Images"},{"location":"01-proxmox/storage/_index.en/","text":"Proxmox Storage Configuration \u00b6 This section helps you to configure storage options correctly for the Proxmox setup. To host VM images, ISO files and similar assetsm, we need to configure storage correctly. We use ZFS file system for our proxmox VM disk image storage. The default local storage can be used to store the ISO images of various OSes that we import/upload on to Proxmox. Assumptions: \u00b6 You have a disk partition created in your homelab machine (on Debian). This will be used to create the ZFS storage disk. Decide on storage size \u00b6 The size of the ZFS volume depends on the requirements that you have, and how you intend to use Proxmox. I intend to create up to 6 VMs which will be used for various purposes, and to start with, I feel 512GB of storage is more than enough for my requirement (and then some). Create the ZFS Storage disk \u00b6 Click on the Data Center Node and click on the Storage tab. Then click on \"ZFS\" Give a logical name for the ZFS disk (I gave \"proxmox-disk-1\"), and select the right device that will be used to create this disk. Choose \"zstd\" as the compression method, and \"Single Disk\" as a RAID level. Note that ZFS is not compatible with disks backed by a hardware RAID controller. Then click \"create\". Once created, the ZFS disk will show details similar to this:","title":"Storage Setup"},{"location":"01-proxmox/storage/_index.en/#proxmox-storage-configuration","text":"This section helps you to configure storage options correctly for the Proxmox setup. To host VM images, ISO files and similar assetsm, we need to configure storage correctly. We use ZFS file system for our proxmox VM disk image storage. The default local storage can be used to store the ISO images of various OSes that we import/upload on to Proxmox.","title":"Proxmox Storage Configuration"},{"location":"01-proxmox/storage/_index.en/#assumptions","text":"You have a disk partition created in your homelab machine (on Debian). This will be used to create the ZFS storage disk.","title":"Assumptions:"},{"location":"01-proxmox/storage/_index.en/#decide-on-storage-size","text":"The size of the ZFS volume depends on the requirements that you have, and how you intend to use Proxmox. I intend to create up to 6 VMs which will be used for various purposes, and to start with, I feel 512GB of storage is more than enough for my requirement (and then some).","title":"Decide on storage size"},{"location":"01-proxmox/storage/_index.en/#create-the-zfs-storage-disk","text":"Click on the Data Center Node and click on the Storage tab. Then click on \"ZFS\" Give a logical name for the ZFS disk (I gave \"proxmox-disk-1\"), and select the right device that will be used to create this disk. Choose \"zstd\" as the compression method, and \"Single Disk\" as a RAID level. Note that ZFS is not compatible with disks backed by a hardware RAID controller. Then click \"create\". Once created, the ZFS disk will show details similar to this:","title":"Create the ZFS Storage disk"}]}